my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Thiago")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste(c("X","Y","Z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
bye()
if(!file.exists("data")) {dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx")
library(xlsx)
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("rJava")
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex=1, header=TRUE)
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.xlsx", method="curl")
download.file(fileUrl, destfile="./data/cameras.xlsx")
download.file(fileUrl, destfile="./data/cameras2.xlsx")
library(xlsx)
fileurl
fileUrl
download.file(fileUrl, destfile="./data/cameras2.xlsx")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx"
download.file(fileUrl, destfile="./data/cameras3.xlsx")
install.package("RCurl")
install.packages("RCurl")
library(RCurl)
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xmlValue
?xmlValue
xmlSApply(rootNode, "//name", xmlValue)
xmlSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc, "//li[@class='score]", xmlValue)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name]", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
scores.all()
scores()
scores[[1]]
scores
scores[1]
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$login
jsonData$owner$login
jsonData <- fromJSON("https://api.github.com/users/thiagogarciavaz/repos")
jsonData$owner$login
names(jsonData$owner)
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2) )
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
gplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
?par
colors()
plot(colors())
plot(colors
)
par("lty")
par("col")
par("pch")
par("bg")
par("mar")
par("mfrow")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC", type = "n"))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in NYC")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC"))
with(subset(airquality, Month=5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month!=5), points(Wind, Ozone, col = "red"))
legend("topright", pch=1, col = c("blue", "red"), legend = c("Maio", "Outros meses")
)
model <- lm(Ozone ~ Wind, airquality)
abline(model)
?lm
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation)
plot(Temp, Ozone, main = "Ozone and Temperature")
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in NYC")
})
example(points)
install.packages("RMySQL", type="source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
count(result)
class(result)
nrows(result)
nrow(result)
library(httpr)
library(httr)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd")
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
set.seed(10)
x<-rnorm(100)
f<-rep(0:10, each=50)
y = x + f - f * x + rnorm(100, sd=0.5)
f
y = x + f - f * x + rnorm(100, sd=0.5)
y
f <- factor(f, labels=c("Group 1", "Group 2"))
f<-rep(0:1, each=50)
f
y = x + f - f * x + rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout=c(2,1))
library(lattice)
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x | f, panel=function(x, y, ...){
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=2)
})
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=,mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color=drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv, binwidth=2)
qplot(hwy, data = mpg, facets = drv ~., binwidth=2)
hist(x)
testdata <- data.frame(x = 1:100, y=rnorm(100))
testdat[50,2] <- 100
testdata[50,2] <- 100
plot(testdata$x, testdata$y, type="l", ylim=c(-3,3))
g <- ggplot(testdata, aes(x=x, y=y))
g + geom_line()
g + geom_line() + coord_cartesian(ylim=c(-3, 3))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
myapp <- oauth_app("github", "027ae2d9ade824d5b436")
myapp <- oauth_app("027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
?oauth_app
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httr")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
install.packages("httr")
library(httr)
library(httr)
install.packages("httr")
library(httr)
install.packages(c("digest", "manipulate", "rmarkdown", "swirl"))
library(httr)
oauth_endpoints("github")
install.packages("httr")
remove.packages("httr")
remove.packages(httr)
install.packages("httr")
remove.packages(httr)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- ?oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "027ae2d9ade824d5b436", "557bf8b8c0319959f94f84ba66ec02ba15492cef")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(sqldf )
install.packages("sqldf ")
con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=5)
?read.fwf
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=5, widths=c(9, 8, 8, 8, 8))
x
?read.fwf
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=5, widths=c(10, 8, 8, 8, 8))
x
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
head(x)
x[1]
x[2]
x[4]
sum(x[4])
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
names(nlme)
weight
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
?trellis.par.set
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
set.seed(10)
x<-rnorm(100)
f<-rep(0:1, each=50)
y<-x+f-f*x+rnorm(100, sd=0.5)
xyplot(y ~ x | f, layout=c(2,1))
?xyplot
?panel
?lattice.panel
qplot(votes, rating, data = movies) + geom_smooth()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
head(data)
Sys.setlocale("LC_TIME", "C")
unzip("activity.zip")
data <- read.csv("activity.csv", stringsAsFactors=FALSE)
data$date <- as.Date(data$date)
unzip("activity.zip")
getwd)_
getwd()
setwd("C:\\Projetos\\Coursera\\DS\\RR\\PA1\\RepData_PeerAssessment1")
Sys.setlocale("LC_TIME", "C")
unzip("activity.zip")
data <- read.csv("activity.csv", stringsAsFactors=FALSE)
data$date <- as.Date(data$date)
library(plyr)
dataByDate <-ddply(data, ~date, summarise, stepsPerDay=sum(steps))
with(dataByDate, hist(stepsPerDay, col="blue", main="Steps taken per day",
xlab="Steps per day"))
mean(dataByDate$stepsPerDay, na.rm=TRUE)
median(dataByDate$stepsPerDay, na.rm=TRUE)
dataByInterval <-ddply(data, ~interval, summarise, avgSteps=mean(steps, na.rm=TRUE))
with(dataByInterval, plot(interval, avgSteps, type="l",
ylab="Average number of steps taken", xlab="5-minute interval"))
head(data)
summary(data$interval)
data$interval %% 100
head(data$interval %% 100)
head(data$interval %/% 100)
?as.date
?date
?strptime
head(data$date)
strptime(paste(data$Date, data$interval%/%100, data$interval%%100), "%Y-%m-%d %H %M")
paste(data$Date, data$interval%/%100, data$interval%%100)
paste(data$date, data$interval%/%100, data$interval%%100)
strptime(paste(data$date, data$interval%/%100, data$interval%%100), "%Y-%m-%d %H %M")
data$date <- as.Date(strptime(paste(data$date, data$interval%/%100, data$interval%%100), "%Y-%m-%d %H %M"))
head(data$date)
data$date
?tim
?time
data$date <- strptime(paste(data$date, data$interval%/%100,
data$interval%%100), "%Y-%m-%d %H %M")
data$date
is.na(data$date)
sum(is.na(data$date))
data[(is.na(data$date)),]
time(data[5761]$date)
time(data[5761,]$date)
?strptime
library(plyr)
dataByDate <-ddply(data, ~date, summarise, stepsPerDay=sum(steps))
with(dataByDate, hist(stepsPerDay, col="blue", main="Steps taken per day",
xlab="Steps per day"))
mean(dataByDate$stepsPerDay, na.rm=TRUE)
median(dataByDate$stepsPerDay, na.rm=TRUE)
?strptime
head(as.time(data$date))
head(as.date(data$date))
head(as.Date(data$date))
head(as.Time(data$date))
?printf
?sprintf
sprintf("%d:%d", data$date, data$interval%/%100, data$interval%%100)
sprintf("%d:%d", data$interval%/%100, data$interval%%100)
sprintf("%d2:%d", data$interval%/%100, data$interval%%100)
sprintf("%2d:%d", data$interval%/%100, data$interval%%100)
sprintf("%d:%d", data$interval%/%100, data$interval%%100)
sprintf("%02i:%02i", data$interval%/%100, data$interval%%100)
unzip("activity.zip")
data <- read.csv("activity.csv", stringsAsFactors=FALSE)
data$date <- as.Date(paste(data$date)
data$time <- sprintf("%02i:%02i", data$interval%/%100, data$interval%%100)
unzip("activity.zip")
data <- read.csv("activity.csv", stringsAsFactors=FALSE)
data$date <- as.Date(data$date)
data$time <- sprintf("%02i:%02i", data$interval%/%100, data$interval%%100)
dataByInterval <-ddply(data, ~time, summarise, avgSteps=mean(steps, na.rm=TRUE))
with(dataByInterval, plot(time, avgSteps, type="l",
ylab="Average number of steps taken", xlab="5-minute interval"))
dataByInterval <-ddply(data, ~time, summarise, avgSteps=mean(steps, na.rm=TRUE))
dataByInterval
with(dataByInterval, plot(time, avgSteps, type="l",
ylab="Average number of steps taken", xlab="5-minute interval"))
dataByInterval <-ddply(data, ~time, summarise, avgSteps=mean(steps, na.rm=TRUE))
with(dataByInterval, plot(avgSteps, time, type="l",
ylab="Average number of steps taken", xlab="5-minute interval"))
dataByInterval <-ddply(data, ~interval, summarise, avgSteps=mean(steps, na.rm=TRUE))
with(dataByInterval, plot(interval, avgSteps, type="l",
ylab="Average number of steps taken", xlab="5-minute interval"))
dataByInterval[which.max(dataByInterval$avgSteps), ]$interval
maxInterval <- dataByInterval[which.max(dataByInterval$avgSteps), ]$interval
sprintf("%s which represents the %02i:%02i time format", maxInterval%/%100,
maxInterval%%100)
maxInterval <- dataByInterval[which.max(dataByInterval$avgSteps), ]$interval
sprintf("%s which represents the %02i:%02i time format", maxInterval,
maxInterval%/%100, maxInterval%%100)
filledByDate <-ddply(filledData, ~date, summarise, stepsPerDay=sum(steps))
with(filledByDate, hist(stepsPerDay, col="orange", main="Steps taken per day",
xlab="Steps per day"))
filledByDate <-ddply(filledData, ~date, summarise, stepsPerDay=sum(steps))
?xyplot
?knit2html
knit2html("PA1_template.Rmd")
library(knit)
library("knit")
library(knitr)
knit2html("PA1_template.Rmd")
